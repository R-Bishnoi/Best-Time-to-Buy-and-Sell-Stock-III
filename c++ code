
// here we have a boundation that we can buy and sell any stack only two time means only two trancation will 
//happen.

//buy_1.....sell_1......buy_2........sell_2



class Solution {
public:
    
  int solve(vector<vector<vector<int>>>&dp,vector<int>&arr,int ind,int buy,int timeline){
      
      
      
      if(ind==arr.size() || timeline==0)return 0;
      
      if(dp[ind][buy][timeline]!=-1)return dp[ind][buy][timeline];
 
     
      
      if(buy==1)
    return dp[ind][buy][timeline]=max((-1*arr[ind]+solve(dp,arr,ind+1,0,timeline)),(0+solve(dp,arr,ind+1,1,timeline)));
      
     
      else {
          
          return dp[ind][buy][timeline]=max((arr[ind]+solve(dp,arr,ind+1,1,timeline-1)),(0+solve(dp,arr,ind+1,0,timeline)));
      
      }     
  }  
    
    
    
    
int maxProfit(vector<int>& arr) {
      
    int n=arr.size();
    
    vector<vector<vector<int>>>dp(n,vector<vector<int>>(2,vector<int>(3,-1)));
    
    
    return solve(dp,arr,0,1,2); 
    
    }
        
};

